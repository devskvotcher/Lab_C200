// Темы:
// Перегрузка операторов.

//#include "stdafx.h"	//если Вы используете предкомпиляцию заголовочных
					//файлов, раскомментируйте эту строчку
#include <tchar.h>
#define	  stop __asm nop

int _tmain(int argc, _TCHAR* argv[])
{
//////////////////////////////////////////////////////////////////////

/*
	//Задание 1
	//Создайте класс Point, который будет содержать координаты
	//"точки". Объявите конструктор (конструкторы) класса   

	//1a. "Перегрузите" оператор += так, чтобы при выполнении
	//операции типа pt2+=pt1; складывались
	//одноименные переменные объектов pt1 и pt2, а сумма
	//присваивалась соответствующим переменным объекта pt2 или
	// в случае  pt2+=1; обе переменные объекта pt2 увеличивались на
	// указанное значение
	// (!) Перегрузку выполните с помощью метода класса (оператор +=)
	//Проверьте корректность работы перегруженного оператора
	{
		Point pt1(1,1);
		Point pt2(2,2);
//		pt2+=pt1;
//      	pt2+=1;
		Point pt3(3,3);
//      	pt2+=pt1+=pt3;
		stop
	}
	//1b. "Перегрузите" оператор -= так, чтобы при выполнении
	//операции типа pt2-=pt1; вычитались
	//одноименные переменные объектов pt1 и pt2, а разность
	//присваивалась соответствующим переменным объекта pt2 или
	// в случае  pt2-=1; обе переменные объекта pt2 уменьшались на
	// указанное значение
	//(!) Перегрузку выполнитес помощью глобальной функции (оператор -=)
	//Проверьте корректность работы перегруженного оператора
	{
		Point pt1(1,1);
		Point pt2(2,2);
//		pt2-=pt1;
//      	pt2-=1;
		Point pt3(3,3);
//     		pt2-=pt1-=pt3;
		stop
	}
*/
/*
 	//Задание 2
	//2a. Перегрузите оператор + 
	//с помощью методов класса, где это возможно 
	//так, чтобы любая из закомментированных строк
	//кода выполнялась корректно
	{
		Point pt1(1,1);
		Point pt2(2,2);
		Point pt3;

//		pt3 = pt1 + 5;
//      	pt3 = 2 + pt1;
//		pt3 = pt1 + pt2;

	stop
	}
	//2b. Перегрузите оператор -
	// с помощью  глобальных функций (оператор -)
	//так, чтобы любая из закомментированных строк
	//кода выполнялась корректно
	{
		Point pt1(1,1);
		Point pt2(2,2);
		Point pt3;

//		pt3 = pt1 - 5;
//      	pt3 = 2 - pt1;
//		pt3 = pt1 - pt2;
		stop
	}
	//Задание 3
	// Перегрузите унарный оператор +/- 
	{
		Point pt1(1,1);
		Point pt3;

//		pt3 = -pt1;  // с помощью глобальной функции,
//		pt3 = +pt1;  // с помощью метода класса
	}
	//Задание 4. Перегрузите оператор << (вывода в поток) для
	// класса Point  таким образом, чтобы при выводе отображались координаты точки
	{
		Point pt(10,20);
		std::cout << pt << std::endl;//например, так:x=10, y=20
		stop
	}
*/
/*

	//Задание 5.Перегрузка оператора  =.

//Подключите к проекту файлы MyString.cpp и MyString.h
//класса MyString, разработанного Вами на предыдущем занятии
// Перегрузите оператор присваивания для класса MyString
//Проверьте корректность работы перегруженного оператора

	{
		MyString s1("AAA"), s2;
		s2=s1;
		s1="CCC";
		s2= MyString("tmp");
		s1=s1;
		stop
	}
*/


/*
	//Задание 6. Перегрузите оператор << (вывода в поток) для
	//класса MyString таким образом, чтобы при выполнении приведенной строки
	//на экран было выведено:
	//contents:  "QWERTY"

	MyString s("QWERTY");
	cout<<s<<endl;


	stop
*/
/*
	//Задание 7. Перегрузите операторы + и += для класса MyString таким образом,
  	//чтобы происходила конкатенация строк
	MyString s1("QWERTY"), s2("AAA"), s3, s4("BBB");
	s3 = s1+s2;
	s4 += s1; 
	stop

*/
/*
	//Задание 8. Перегрузите операторы  постфиксный декремент -- и префиксный инкремент
	//для класса MyString таким образом, при применении декремента производился перевод в нижний регистр всех символов, 
	// являющихся буквами латинского алфавита, а при применении инкремента производился перевод в верхний регистр.
	// при работе можно воспользоваться следующими функциями <ctype.h>:
	//int  isupper( int C);
	//int  islower( int C);
	//int  toupper( int C);
	//int  tolower( int C);
	{ 
	
		MyString str1("Hello World!!!");
		MyString str1_2 = str1--;
	
		MyString str2("Hello World!");
		MyString str2_2 = ++str2;
		stop
	*/
/*
	//Задание 9. Перегрузите операторы + и +=   для enum WEEKDAY
	{
		enum WD wd1 = SATURDAY;
		wd1 = wd1 + 2;
		WD wd2 = wd1 + 1;
		wd2 += 2;
	}
	stop
	//Задание 10. Перегрузите оператор << (вывода в поток) для
	//перечисления WD таким образом, чтобы при выводе отображалась строка, 
	// соответствующая именованной константе:
	{
		enum WD wd = SATURDAY;
		std::cout << wd << std::endl;//например, так:saturday
		stop
	}
*/
	return 0;
}//endmain

